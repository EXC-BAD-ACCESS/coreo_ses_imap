## This file was auto-generated by CloudCoreo CLI
## This file was automatically generated using the CloudCoreo CLI
##
## This config.rb file exists to create and maintain services not related to compute.
## for example, a VPC might be maintained using:
##
## coreo_aws_vpc_vpc "my-vpc" do
##   action :sustain
##   cidr "12.0.0.0/16"
##   internet_gateway true
## end
##

coreo_aws_vpc_vpc "${VPC_NAME}" do
  action :find
  cidr "${VPC_OCTETS}/16"
end

coreo_aws_vpc_routetable "${PRIVATE_ROUTE_NAME}" do
  action :find
  vpc "${VPC_NAME}"
  number_of_tables 3
  tags [
        "Name=${PRIVATE_ROUTE_NAME}"
       ]
end

coreo_aws_vpc_subnet "${PRIVATE_SUBNET_NAME}" do
  action :find
  route_table "${PRIVATE_ROUTE_NAME}"
  vpc "${VPC_NAME}"
end

coreo_aws_s3_policy "${APP_BUCKET}-policy" do
  action :sustain
  policy_document <<-EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::${APP_BUCKET}/*",
        "arn:aws:s3:::${APP_BUCKET}"
      ]
    }
  ]
}
EOF
end

coreo_aws_s3_bucket "${APP_BUCKET}" do
   action :sustain
   bucket_policies ["${APP_BUCKET}-policy"]
   region "${APP_BUCKET_REGION}"
end

coreo_aws_vpc_routetable "${PUBLIC_ROUTE_NAME}" do
  action :find
  vpc "${VPC_NAME}"
end

coreo_aws_vpc_subnet "${PUBLIC_SUBNET_NAME}" do
  action :find
  route_table "${PUBLIC_ROUTE_NAME}"
  vpc "${VPC_NAME}"
end

coreo_aws_ec2_securityGroups "${APP_NAME}-elb-sg" do
  action :sustain
  description "Open https to the world"
  vpc "${VPC_NAME}"
  allows [
          {
            :direction => :ingress,
            :protocol => :tcp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          },{
            :direction => :ingress,
            :protocol => :udp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          },{
            :direction => :ingress,
            :protocol => :icmp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          },{
            :direction => :egress,
            :protocol => :tcp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          },{
            :direction => :egress,
            :protocol => :udp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          },{
            :direction => :egress,
            :protocol => :icmp,
            :ports => ["0..65535"],
            :cidrs => ${VPN_ACCESS_CIDRS},
          }
    ]
end

coreo_aws_ec2_elb "${APP_NAME}-elb" do
  action :sustain
  type "${ELB_TYPE}"
  vpc "${VPC_NAME}"
  subnet "${ELB_SUBNET_NAME}"
  security_groups ["${APP_NAME}-elb-sg"]
  listeners [
             {
               :elb_protocol => 'tcp',
               :elb_port => ${ELB_PROXY_PORT},
               :to_protocol => 'tcp',
               :to_port => ${ELB_PROXY_PORT}
             },
             {
               :elb_protocol => 'tcp', #should be ssl, but aws requires cert and coreo doesn't support ACM certs yet...
               :elb_port => ${ELB_SSL_PROXY_PORT},
               :to_protocol => 'tcp',
               :to_port => ${ELB_HEALTH_CHECK_PORT}
             },
             {
               :elb_protocol => 'tcp', #should be ssl, but aws requires cert and coreo doesn't support ACM certs yet...
               :elb_port => ${ELB_SSL_IMAP_PORT},
               :to_protocol => 'tcp',
               :to_port => ${ELB_IMAP_PORT}
             },
            ]
  health_check_protocol 'tcp'
  health_check_port ${ELB_HEALTH_CHECK_PORT}
  health_check_timeout 5
  health_check_interval 120
  health_check_unhealthy_threshold 5
  health_check_healthy_threshold 2
end

coreo_aws_route53_record "${APP_DNS_PREFIX}" do
  action :sustain
  type "CNAME"
  zone "${DNS_ZONE}"
  values ["COMPOSITE::coreo_aws_ec2_elb.${APP_NAME}-elb.dns_name"]
end

coreo_aws_ec2_securityGroups "${APP_NAME}-sg" do
  action :sustain
  description "Open connections to the world"
  vpc "${VPC_NAME}"
  allows [
          {
            :direction => :ingress,
            :protocol => :tcp,
            :ports => ["0..65535"],
            :groups => ["${APP_NAME}-elb-sg"],
          },{
            :direction => :ingress,
            :protocol => :udp,
            :ports => ["0..65535"],
            :groups => ["${APP_NAME}-elb-sg"],
          },{
            :direction => :ingress,
            :protocol => :icmp,
            :ports => ["0..65535"],
            :groups => ["${APP_NAME}-elb-sg"],
          },{
            :direction => :ingress,
            :protocol => :tcp,
            :ports => [22],
            :cidrs => ${VPN_SSH_ACCESS_CIDRS},
          },{
            :direction => :egress,
            :protocol => :tcp,
            :ports => ["0..65535"],
            :cidrs => ["0.0.0.0/0"],
          },{
            :direction => :egress,
            :protocol => :udp,
            :ports => ["0..65535"],
            :cidrs => ["0.0.0.0/0"],
          },{
            :direction => :egress,
            :protocol => :icmp,
            :ports => ["0..65535"],
            :cidrs => ["0.0.0.0/0"],
          }
    ]
end

coreo_aws_iam_policy "${APP_NAME}-rds" do
  action :sustain
  policy_name "${APP_NAME}RDSManagement"
  policy_type "inline"
  policy_document <<-EOH
{
  "Statement": [
    {
      "Effect": "Allow",
      "Resource": [
          "*"
      ],
      "Action": [
          "rds:*"
      ]
    }
  ]
}
EOH
end

coreo_aws_iam_policy "${APP_NAME}-elb" do
  action :sustain
  policy_name "${APP_NAME}ELBManagement"
  policy_type "inline"
  policy_document <<-EOH
{
  "Statement": [
    {
      "Effect": "Allow",
      "Resource": [
          "*"
      ],
      "Action": [
          "elasticloadbalancing:*"
      ]
    }
  ]
}
EOH
end

coreo_aws_iam_policy "${APP_NAME}-ses" do
  action :sustain
  policy_name "${APP_NAME}SESManagement"
  policy_type "inline"
  policy_document <<-EOH
{
    "Statement": [
        {
            "Effect": "Allow",
            "Resource": [
                "*"
            ],
            "Action": [
                "ses:*"
            ]

        }
    ]
}
EOH
end

coreo_aws_iam_instance_profile "${APP_NAME}" do
  action :sustain
  policies ["${APP_NAME}-rds", "${APP_NAME}-elb", "${APP_NAME}-ses"]
end

coreo_aws_ec2_instance "${APP_NAME}" do
  action :define
  upgrade_trigger "1"
  image_id "${APP_AMI_ID}"
  size "${APP_INSTANCE_TYPE}"
  security_groups ["${APP_NAME}-sg"]
  ssh_key "${APP_SSH_KEY_NAME}"
  role "${APP_NAME}"
end

coreo_aws_ec2_autoscaling "${APP_NAME}" do
  action :sustain
  minimum 1
  maximum 1
  server_definition "${APP_NAME}"
  subnet "${PRIVATE_SUBNET_NAME}"
  elbs ["${APP_NAME}-elb"]
end
